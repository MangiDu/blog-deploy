(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{603:function(t,a,s){"use strict";s.r(a);var e=s(6),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("版本：JAVA SE 8")]),t._v(" "),s("h2",{attrs:{id:"编程概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程概念"}},[t._v("#")]),t._v(" 编程概念")]),t._v(" "),s("h3",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("ul",[s("li",[t._v("状态 -> 属性")]),t._v(" "),s("li",[t._v("表现 -> 方法")])]),t._v(" "),s("p",[t._v("观察现实世界的物体，考虑他们有什么属性和可能被操作导致属性变化的方法。")]),t._v(" "),s("p",[t._v("对象的优点：")]),t._v(" "),s("ul",[s("li",[t._v("模块化")]),t._v(" "),s("li",[t._v("隐藏内部实现细节")]),t._v(" "),s("li",[t._v("代码重用")]),t._v(" "),s("li",[t._v("插件化、易于调试")])]),t._v(" "),s("h3",{attrs:{id:"类class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类class"}},[t._v("#")]),t._v(" 类 "),s("code",[t._v("class")])]),t._v(" "),s("p",[t._v("通过构造类得到实例对象。类就像模板一样。")]),t._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("p",[t._v("子类通过继承得到父类中通用的属性和方法。")]),t._v(" "),s("h3",{attrs:{id:"接口interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口interface"}},[t._v("#")]),t._v(" 接口 "),s("code",[t._v("interface")])]),t._v(" "),s("p",[t._v("接口定义了方法的输入和输出，继承了接口的类必需按照这个标准实现方法。")]),t._v(" "),s("h3",{attrs:{id:"package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package"}},[t._v("#")]),t._v(" package")]),t._v(" "),s("p",[t._v("等于命名空间，方便组织代码")]),t._v(" "),s("h2",{attrs:{id:"语法基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法基础"}},[t._v("#")]),t._v(" 语法基础")]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("ul",[s("li",[t._v("Instance variables (Non-static Fields): 属于实例本身，独立于其他个体的同名变量")]),t._v(" "),s("li",[t._v("Class variables (Static Fields): 属于类，独一份，不管实例数量有多少（亦可使用 "),s("code",[t._v("final")]),t._v("  关键字指示其不可变性）")]),t._v(" "),s("li",[t._v("Local variables")]),t._v(" "),s("li",[t._v("Parameters")])]),t._v(" "),s("h3",{attrs:{id:"命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[t._v("#")]),t._v(" 命名")]),t._v(" "),s("ul",[s("li",[t._v("大小写敏感，以 "),s("code",[t._v("$")]),t._v(" 、 "),s("code",[t._v("_")]),t._v(" 或者字母起头，但惯例一般不推荐以符号作为命名起始")]),t._v(" "),s("li",[t._v("驼峰式命名；常量全大写，以下划线连接，此情况以外一般不再使用下划线")])]),t._v(" "),s("h3",{attrs:{id:"原始数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[t._v("#")]),t._v(" 原始数据类型")]),t._v(" "),s("ul",[s("li",[t._v("byte")]),t._v(" "),s("li",[t._v("short")]),t._v(" "),s("li",[t._v("int")]),t._v(" "),s("li",[t._v("long")]),t._v(" "),s("li",[t._v("float")]),t._v(" "),s("li",[t._v("double")]),t._v(" "),s("li",[t._v("boolean")]),t._v(" "),s("li",[t._v("char")])]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v("  类型是 "),s("code",[t._v("java.lang.String")]),t._v("  提供的，需要使用双引号包裹")]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("System.arraycopy")])]),t._v(" "),s("li",[s("code",[t._v("java.util.Arrays.copyOfRange")])])]),t._v(" "),s("h2",{attrs:{id:"类和对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[t._v("#")]),t._v(" 类和对象")]),t._v(" "),s("h3",{attrs:{id:"类class-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类class-2"}},[t._v("#")]),t._v(" 类 "),s("code",[t._v("class")])]),t._v(" "),s("p",[t._v("一个子类 "),s("code",[t._v("subclass")]),t._v("  只能继承自一个父类 "),s("code",[t._v("superclass")]),t._v(" ，但可以实现多个接口 "),s("code",[t._v("interface")])]),t._v(" "),s("ul",[s("li",[t._v("类中的成员变量：域（ "),s("code",[t._v("fields")]),t._v(" ）")]),t._v(" "),s("li",[t._v("方法或代码块中的：local variables")]),t._v(" "),s("li",[t._v("方法声明中的：parameters")])]),t._v(" "),s("p",[t._v("权限修饰符")]),t._v(" "),s("ul",[s("li",[t._v("public")]),t._v(" "),s("li",[t._v("private")])]),t._v(" "),s("h4",{attrs:{id:"overloading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overloading"}},[t._v("#")]),t._v(" "),s("code",[t._v("overloading")])]),t._v(" "),s("p",[t._v("类内部的方法可以重名，java 可以自动分辨不同入参类型的同名方法")]),t._v(" "),s("p",[t._v("编译器无法区分返回类型，所以不要提供多个相同签名（命名 + 入参列表）但返回不同的方法")]),t._v(" "),s("p",[t._v("尽管如此，还是应当尽可能少用同名方法的重载，这会降低代码的可读性")]),t._v(" "),s("h3",{attrs:{id:"权限修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#权限修饰符"}},[t._v("#")]),t._v(" 权限修饰符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("修饰符")]),t._v(" "),s("th",[t._v("Class")]),t._v(" "),s("th",[t._v("Package")]),t._v(" "),s("th",[t._v("Subclass")]),t._v(" "),s("th",[t._v("World")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("public")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")])]),t._v(" "),s("tr",[s("td",[t._v("protected")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("N")])]),t._v(" "),s("tr",[s("td",[t._v("no modifier")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")])]),t._v(" "),s("tr",[s("td",[t._v("private")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")])])])]),t._v(" "),s("h3",{attrs:{id:"nested-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nested-classes"}},[t._v("#")]),t._v(" Nested Classes")]),t._v(" "),s("p",[t._v("非 static 的嵌套类，可以访问它所在的类的其他成员，static 修饰的则不可以")]),t._v(" "),s("p",[t._v("嵌套类可用的修饰符")]),t._v(" "),s("ul",[s("li",[t._v("private")]),t._v(" "),s("li",[t._v("public")]),t._v(" "),s("li",[t._v("protected")]),t._v(" "),s("li",[t._v("package private")])]),t._v(" "),s("p",[t._v("为什么使用嵌套类？")]),t._v(" "),s("ul",[s("li",[t._v("在逻辑上组织仅在此处使用的 classes")]),t._v(" "),s("li",[t._v("提升封装性")]),t._v(" "),s("li",[t._v("易读易维护")])]),t._v(" "),s("p",[t._v("因为 JVM 可能运行在不同环境上，创建的 "),s("code",[t._v("synthetic constructs")]),t._v("  会有差别，所以序列化对象后在反序列化可能导致不同的结果。")]),t._v(" "),s("h3",{attrs:{id:"匿名类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名类"}},[t._v("#")]),t._v(" 匿名类")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),t._v(" frenchGreeting "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWord")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tout le monde"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("greetSomeone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tout le monde"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("greetSomeone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" someone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someone\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Salut "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("构成：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new")]),t._v("  操作符")]),t._v(" "),s("li",[t._v("需要被实现的接口或被扩展的类")]),t._v(" "),s("li",[t._v("括号内传给构造器的参数")]),t._v(" "),s("li",[t._v("类的声明体")])]),t._v(" "),s("p",[t._v("匿名类没有 construtor")]),t._v(" "),s("h3",{attrs:{id:"lambda-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda-表达式"}},[t._v("#")]),t._v(" Lambda 表达式")]),t._v(" "),s("p",[t._v("为了清减和易读，它允许你把方法 / 代码当做数据作为参数传递。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TAG"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" y:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("构成：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("(int x, int y)")]),t._v(" ：参数部分")]),t._v(" "),s("li",[s("code",[t._v("->")]),t._v(" ：箭头 goes to，指向代码块")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("{}")]),t._v("  包裹的代码块")])]),t._v(" "),s("h3",{attrs:{id:"方法引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[t._v("#")]),t._v(" 方法引用")]),t._v(" "),s("p",[t._v("如果一个方法没有任何返回只是执行了已有方法的话，使用 lambda 表达式就会显得略微复杂些了")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rosterArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareByAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"枚举类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[t._v("#")]),t._v(" 枚举类型")]),t._v(" "),s("h2",{attrs:{id:"标注annotations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标注annotations"}},[t._v("#")]),t._v(" 标注 "),s("code",[t._v("annotations")])]),t._v(" "),s("h2",{attrs:{id:"interface-inheritance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface-inheritance"}},[t._v("#")]),t._v(" interface & inheritance")]),t._v(" "),s("h3",{attrs:{id:"interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[t._v("#")]),t._v(" interface")]),t._v(" "),s("p",[t._v("只能包含：")]),t._v(" "),s("ul",[s("li",[t._v("constants")]),t._v(" "),s("li",[t._v("method signatures")]),t._v(" "),s("li",[t._v("default methods")]),t._v(" "),s("li",[t._v("static methods")]),t._v(" "),s("li",[t._v("nested types")])]),t._v(" "),s("p",[t._v("方法体只能在 default methods 和 static methods 中存在")]),t._v(" "),s("p",[t._v("interface 不可以被实例化，它只能被 "),s("code",[t._v("implement")]),t._v("  或者 "),s("code",[t._v("extend")])]),t._v(" "),s("p",[t._v("接口间的继承，也遵循就近原色，如果方法签名或方法本身被重载了，使用的最近的定义。")]),t._v(" "),s("h3",{attrs:{id:"overrides"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overrides"}},[t._v("#")]),t._v(" overrides")]),t._v(" "),s("p",[t._v("定义与父类中方法有相同签名的方法：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("Superclass Instance Method")]),t._v(" "),s("th",[t._v("Superclass Static Method")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Subclass Instance Method")]),t._v(" "),s("td",[t._v("Overrides")]),t._v(" "),s("td",[t._v("Generates a compile-time error")])]),t._v(" "),s("tr",[s("td",[t._v("Subclass Static Method")]),t._v(" "),s("td",[t._v("Generates a compile-time error")]),t._v(" "),s("td",[t._v("Hides")])])])]),t._v(" "),s("h3",{attrs:{id:"polymorphism-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polymorphism-多态"}},[t._v("#")]),t._v(" Polymorphism 多态")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"关键字super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字super"}},[t._v("#")]),t._v(" 关键字 "),s("code",[t._v("super")])]),t._v(" "),s("ul",[s("li",[t._v("获取父级类的成员")]),t._v(" "),s("li",[t._v("获取父类的构造器")])]),t._v(" "),s("h3",{attrs:{id:"final-classes-and-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final-classes-and-methods"}},[t._v("#")]),t._v(" final classes and methods")]),t._v(" "),s("p",[t._v("可以用 "),s("code",[t._v("final")]),t._v("  声明类的方法，该方法不可改变。在构造器中调用的方法应当被声明为 "),s("code",[t._v("final")]),t._v(" ，以避免因重载造成意料之外的问题。")]),t._v(" "),s("p",[t._v("用 "),s("code",[t._v("final")]),t._v("  声明的类，不可被继承。")]),t._v(" "),s("h3",{attrs:{id:"abstract-methods-and-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract-methods-and-class"}},[t._v("#")]),t._v(" abstract methods and class")]),t._v(" "),s("p",[t._v("都不可以被实例化。")]),t._v(" "),s("p",[t._v("区别：抽象类可以声明非 "),s("code",[t._v("static")]),t._v("  和非 "),s("code",[t._v("final")]),t._v("  的域，可以定义 "),s("code",[t._v("public")]),t._v(" 、 "),s("code",[t._v("protected")]),t._v(" 、 "),s("code",[t._v("private")]),t._v("  的具体方法")]),t._v(" "),s("h2",{attrs:{id:"数字与字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字与字符串"}},[t._v("#")]),t._v(" 数字与字符串")]),t._v(" "),s("h3",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("valueOf")]),t._v(" 、 "),s("code",[t._v("parseXXX")])]),t._v(" "),s("li",[s("code",[t._v('"" + intX')])])]),t._v(" "),s("h3",{attrs:{id:"操作字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作字符串"}},[t._v("#")]),t._v(" 操作字符串")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("substring")]),t._v(" ,  "),s("code",[t._v("startIndex")]),t._v("  到  "),s("code",[t._v("endIndex - 1")])])]),t._v(" "),s("h2",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("p",[t._v("暂时不指定类型，等到使用时再决定。")]),t._v(" "),s("p",[t._v("泛型增加了代码的稳定性，并在编译阶段使更多问题得以检测。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用泛型类时，创建对象的时候必须指定类型参数的具体类型。")]),t._v(" "),s("li",[t._v("使用泛型方法时，不必指明参数类型，编译器会自行推断出所需的具体类型。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);