(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{583:function(e,r,a){"use strict";a.r(r);var t=a(6),i=Object(t.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前置说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置说明"}},[e._v("#")]),e._v(" 前置说明")]),e._v(" "),a("h3",{attrs:{id:"为什么需要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要"}},[e._v("#")]),e._v(" 为什么需要")]),e._v(" "),a("p",[e._v("数组可以通过索引访问 "),a("strong",[e._v("随机")]),e._v(" 元素。但是某些情况下，我们可能需要限制 "),a("strong",[e._v("处理顺序")]),e._v("。")]),e._v(" "),a("p",[e._v("处理顺序分两种，并对应两种数据结构：")]),e._v(" "),a("ul",[a("li",[e._v("先入先出（First In First Out）：队列")]),e._v(" "),a("li",[e._v("后入先出（Last In First Out）：栈")])]),e._v(" "),a("h3",{attrs:{id:"能解决什么样的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#能解决什么样的问题"}},[e._v("#")]),e._v(" 能解决什么样的问题")]),e._v(" "),a("ul",[a("li",[e._v("广度优先搜索（Breadth First Search）")]),e._v(" "),a("li",[e._v("深度优先搜索（Depth First Search）以及深入理解递归")])]),e._v(" "),a("h2",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[e._v("#")]),e._v(" 队列")]),e._v(" "),a("p",[e._v("队列是线性数据结构，涉及操作：入队、出队。")]),e._v(" "),a("p",[e._v("但是某些情况下可能存在效率很低、浪费空间的问题，此时考虑 "),a("strong",[e._v("循环队列")]),e._v("，目的是重用以减少浪费。")]),e._v(" "),a("p",[e._v("用 "),a("code",[e._v("(tail + 1) % length == head")]),e._v("  判断循环队列是否已满。")]),e._v(" "),a("p",[e._v("关注这个动画的演示过程："),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/queue-stack/216/queue-first-in-first-out-data-structure/864/",target:"_blank",rel:"noopener noreferrer"}},[e._v("循环队列"),a("OutboundLink")],1),e._v("，注意处理索引的边界情况。")]),e._v(" "),a("LeetCodeSlides",{attrs:{title:"循环队列",root:"https://leetcode-cn.com/explore/learn/card/queue-stack/216/queue-first-in-first-out-data-structure/864/",json:{timeline:[{image:"../Figures/circular_queue/Slide48.png",duration:1200},{image:"../Figures/circular_queue/Slide49_2.png",duration:1200},{image:"../Figures/circular_queue/Slide50.png",duration:1200},{image:"../Figures/circular_queue/Slide51.png",duration:1200},{image:"../Figures/circular_queue/Slide52.png",duration:1200},{image:"../Figures/circular_queue/Slide53.png",duration:1200},{image:"../Figures/circular_queue/Slide54.png",duration:1200},{image:"../Figures/circular_queue/Slide55.png",duration:1200},{image:"../Figures/circular_queue/Slide56.png",duration:1200},{image:"../Figures/circular_queue/Slide57.png",duration:1200},{image:"../Figures/circular_queue/Slide58.png",duration:1200},{image:"../Figures/circular_queue/Slide59.png",duration:1200},{image:"../Figures/circular_queue/Slide60.png",duration:1200},{image:"../Figures/circular_queue/Slide61.png",duration:1200},{image:"../Figures/circular_queue/Slide62.png",duration:1200},{image:"../Figures/circular_queue/Slide63.png",duration:1200},{image:"../Figures/circular_queue/Slide64.png",duration:1200}]}}}),e._v(" "),a("h3",{attrs:{id:"广度优先遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广度优先遍历"}},[e._v("#")]),e._v(" 广度优先遍历")]),e._v(" "),a("p",[e._v("是用于遍历或搜索 "),a("strong",[e._v("树或图")]),e._v(" 的一种算法。")]),e._v(" "),a("p",[e._v("使用 BFS，可以找到起始节点到目标节点的路径，特别是 "),a("strong",[e._v("最短路径")]),e._v("。")]),e._v(" "),a("LeetCodeSlides",{attrs:{title:"层序遍历",root:"https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/8/",json:{timeline:[{image:"../Figures/binary_tree/level_traversal/Slide01.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide02.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide03.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide04.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide05.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide06.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide07.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide08.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide09.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide10.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide11.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide12.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide13.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide14.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide15.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide16.png",duration:1200},{image:"../Figures/binary_tree/level_traversal/Slide17.png",duration:1200}]}}}),e._v(" "),a("p",[e._v("如果是图遍历，视情况处理是否需要重复添加节点。")]),e._v(" "),a("h3",{attrs:{id:"题后思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题后思考"}},[e._v("#")]),e._v(" 题后思考")]),e._v(" "),a("p",[e._v("注意题目条件，先理清要从哪里开始，遍历到节点时的处理是什么。")]),e._v(" "),a("p",[e._v("像"),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/queue-stack/217/queue-and-bfs/871/",target:"_blank",rel:"noopener noreferrer"}},[e._v("墙与门"),a("OutboundLink")],1),e._v("是先确定门节点，然后从门节点开始遍历，并记录步数。")]),e._v(" "),a("p",[e._v("像"),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/queue-stack/217/queue-and-bfs/872/",target:"_blank",rel:"noopener noreferrer"}},[e._v("岛屿数量"),a("OutboundLink")],1),e._v("则是找到未被记录过的土地节点开始遍历相邻土地，遍历时要注意避免重复计数。")]),e._v(" "),a("h2",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[e._v("#")]),e._v(" 栈")]),e._v(" "),a("p",[e._v("操作：入栈、出栈、"),a("strong",[e._v("获取栈顶元素")])]),e._v(" "),a("p",[e._v("最小栈问题：维护两个栈，一个栈负责正常的数据出入，另一个栈维护由底向上降序的数据，后者栈顶的元素一定是前者中最小的值")]),e._v(" "),a("h3",{attrs:{id:"题后思考-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题后思考-2"}},[e._v("#")]),e._v(" 题后思考")]),e._v(" "),a("p",[e._v("考虑是否需要按照"),a("strong",[e._v("某种顺序")]),e._v("维护数据，或者数据内容是否有"),a("strong",[e._v("嵌套、匹配")]),e._v("一类的条件。")]),e._v(" "),a("p",[e._v("在深度优先遍历顺序中，找到的第一条路径可能不是最短路径。")]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("记住队列和栈的特点（先进先出与后进先出），考虑问题是否有相同的特征再去应用。")]),e._v(" "),a("p",[e._v("队列的扩展问题：双端队列、优先问题。")])],1)}),[],!1,null,null,null);r.default=i.exports}}]);