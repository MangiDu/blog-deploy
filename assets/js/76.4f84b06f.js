(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{597:function(t,e,a){"use strict";a.r(e);var s=a(6),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新特性"}},[t._v("#")]),t._v(" 新特性")]),t._v(" "),a("h3",{attrs:{id:"组合式api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合式api"}},[t._v("#")]),t._v(" 组合式 API")]),t._v(" "),a("p",[t._v("考虑在极大型项目中，代码的共享与重用是非常重要的，以往的组件形式可能是不够好的。")]),t._v(" "),a("p",[t._v("使用配置式的方式（ "),a("code",[t._v("options")]),t._v(" :  "),a("code",[t._v("data")]),t._v(" ,  "),a("code",[t._v("computed")]),t._v(" ,  "),a("code",[t._v("methods")]),t._v(" ,  "),a("code",[t._v("watch")]),t._v(" ）组织组件逻辑在大多数情况下是够用的。然而当组件越来越大越来越复杂时，四处分散的逻辑代码不仅导致阅读上的困难，这种逻辑上的割裂也使得维护变得艰难。")])])}),[],!1,null,null,null);e.default=o.exports}}]);