(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{627:function(t,v,_){"use strict";_.r(v);var l=_(6),i=Object(l.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"重构的目的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重构的目的"}},[t._v("#")]),t._v(" 重构的目的")]),t._v(" "),_("ul",[_("li",[t._v("重构不应改变原有程序的可观测的行为")]),t._v(" "),_("li",[t._v("把添加新功能和重构当做两件不同的事情来对待，就像两顶帽子，在开发过程中我们经常两顶帽子换着戴")]),t._v(" "),_("li",[t._v("小步重构，更安全的前进，让代码在绝大部分时间处于可工作的状态")]),t._v(" "),_("li",[t._v("捡垃圾式的重构：发现一个垃圾时，不想跑题太多，同时也不想将垃圾留在原地；如果此时很容易重构，就立即完成，否则就记录下来，等后续再来重构")]),t._v(" "),_("li",[t._v("绝大多数的重构是见机行事的，而非单独安排的一项工作")]),t._v(" "),_("li",[t._v("重构的唯一目的是让我们开发更快，用更少的工作量创造更高的价值；重构不是来自 “整洁的代码”“良好的工程实践” 等道德要求，而是纯粹从经济角度出发的考量")]),t._v(" "),_("li",[t._v("自测试代码是重构的基石，也是持续集成的关键环节。要想 “敏捷” 做到名副其实，必须要做好这三大实践–自测试代码、持续集成、重构（自测试代码和重构一起构成了 TDD）")])]),t._v(" "),_("h2",{attrs:{id:"整洁代码的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整洁代码的方法"}},[t._v("#")]),t._v(" 整洁代码的方法")]),t._v(" "),_("blockquote",[_("p",[t._v("但凡是可读的代码必定是可维护的")])]),t._v(" "),_("ul",[_("li",[t._v("删除不必要的注释：可读性良好的代码可以自解释")]),t._v(" "),_("li",[t._v("重视命名")]),t._v(" "),_("li",[_("code",[t._v("if")]),t._v("  语句：提前退出机制")]),t._v(" "),_("li",[t._v("营地法则：“我们应该至少在离开营地时，让营地比我们到来时更干净”")]),t._v(" "),_("li",[t._v("统一的代码风格")])])])}),[],!1,null,null,null);v.default=i.exports}}]);